#+TITLE: P2

* Funciones 
 * gotoxy
#+begin_src c
void gotoxy(int x, int y) {
    union REGS inregs, outregs;

    inregs.h.ah = 2;
    inregs.h.dh = x;
    inregs.h.dl = y;
    inregs.h.bh = 0;
    int86(0x10, &inregs, &outregs);
}
#+end_src
[[file:screenshots/gotoxy.png]]

 * setcursortype
#+begin_src c
int INVISIBLE = 0;
int NORMAL = 1;
int GRUESO = 2;


void setcursortype(int tipo_cursor){
    union REGS inregs, outregs;
    inregs.h.ah = 0x01;
    switch(tipo_cursor){
    case 0: //invisible
	inregs.h.ch = 010;
	inregs.h.cl = 000;
	break;
    case 1: //normal
	inregs.h.ch = 010;
	inregs.h.cl = 010;
	break;
    case 2: //grueso
	inregs.h.ch = 000;
	inregs.h.cl = 010;
	break;
    }
    int86(0x10, &inregs, &outregs);
}
#+end_src
 * Uso
#+begin_src c
setcursortype(INVISIBLE);
#+end_src
[[file:screenshots/cursortype.gif]]
 * setvideomode


#+begin_src c
void setvideomode(unsigned char mode) {
   union REGS inregs, outregs;
   inregs.h.al = mode;
   inregs.h.ah = 0x00;
   int86(0x10, &inregs, &outregs);
}
#+end_src


 * getvideomode
#+begin_src c
int getvideomode() {
    union REGS inregs, outregs;
    int86(0x10, &inregs, &outregs);

    return inregs.h.al;
}
#+end_src

   [[file:screenshots/getvideomode.png]]


 * textcolor
#+begin_src c
int COLOR = 0; // Inicializado a negro
void textcolor(unsigned char c) {
    COLOR = c;
}

#+end_src
 * textbackground

#+begin_src c
int BACKGROUND = 0;
void textbackground(unsigned char c) {
    BACKGROUND = c;
}
#+end_src

 * cputchar
#+begin_src c
void cputchar(unsigned char c) {
    union REGS inregs, outregs;
    inregs.h.ah = 0x09;
    inregs.h.al = c;
    inregs.h.bl = BACKGROUND << 4 | COLOR;
    inregs.h.bh = 0x00;
    inregs.x.cx = 1;
    int86(0x10, &inregs, &outregs);
}

#+end_src

   [[file:screenshots/cputchar.png]]

 * getche

   Espera hasta que una tecla sea presionada y la imprime por pantalla.
#+begin_src c
void getche() {
    union REGS inregs, outregs;
    int caracter;
    inregs.h.ah = 1;
    int86(0x21, &inregs, &outregs);

    caracter = outregs.h.al;


    inregs.h.ah = 9;
    inregs.h.al = caracter;
    int86(0x10, &inregs, &outregs);
}
#+end_src
 * clrscr

Imprime un fin de línea por cada línea que tiene el modo actual.
Posteriormente mueve el cursor a la posición 0-0.
#+begin_src c
int i = 0;
void clrscr() {
    union REGS inregs, outregs;
    int86(0x10, &inregs, &outregs);
    i = 0;
    for (i; i < inregs.h.al; i++) {
        printf("\n");
    }
    gotoxy(0, 0);
}

#+end_src

* Ejercicios extra
Se presentan 2 ejercicios extras para subir nota, siendo respectivamente:
 - Dibujar un rectángulo para modo texto.
 - El juego pong para modo vídeo.
 * Rectángulo
   Se incluye en el archivo [[file:main.c]]. Consiste en una función que dada la
   esquina superior izquierda y la esquina inferior derecha dibuja un rectángulo
   con los colores seleccionados. Se utiliza el caracter '|' para representar el
   rectángulo en las columnas y '-' para las filas.

   [[file:screenshots/box.png]]

 * Pong
   El juego clásico pong, donde una pelota se mueve y los jugadores controlan un
   rectángulo con el que tienen que golpear la pelota.
   Se incluye en el fichero [[file:pong.c]].

   [[file:screenshots/pong.gif]]
